[project]
name = "pre-commit-trivy"
version = "0.1.0"
description = "Pre-commit hook for Trivy security scanning to detect vulnerabilities in your codebase"
authors = [
    {name = "cebidhem", email = "cebidhem@pm.me"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.9"
keywords = ["pre-commit", "trivy", "security", "vulnerability", "scanning", "devops"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Security",
]
dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pylint>=3.0.0",
    "black>=23.0.0",
]

[project.scripts]
trivy-scan = "pre_commit_hooks.trivy_scan:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["pre_commit_hooks"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--strict-markers"
filterwarnings = ["ignore::DeprecationWarning"]

[tool.coverage.run]
source = ["pre_commit_hooks"]
omit = [".venv/*", "tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.pylint.main]
ignore-paths = ["tests/", ".venv/"]
max-line-length = 100

[tool.pylint.messages_control]
disable = [
    "missing-docstring",
    "invalid-name",
]

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311", "py312"]
exclude = '''
/(
    \.venv
  | \.git
  | \.pytest_cache
  | __pycache__
  | build
  | dist
)/
'''
